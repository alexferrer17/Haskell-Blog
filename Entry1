IMPERATIVE VS FUNCTIONING PROGRAMMING: (Week 1)

With Imperative programming we instruct the computer what to do step by step.

In the other hand functioning programming approaches problem solving as pure functional.

Lets take Python as an example for Imperative programming.
In python we assign operations that modifies the memory and we don't fully have
to understand the memory inside of it to be able to assign these operations.
Haskell in the other hand, everything is an expression where the computer then evaluates.
Functional models are much simpler than imperative programming ones.


RECURSIVE PROGRAMMING IN HASKELL: (WEEK 2)

After playing around with Haskell basic operations it seems to
me that is quite straight forward and reminds me of simple algebra.
Simple math can be quite simple to understand but understanding recursion was a litle
bit more chalenlling.

First I had to understand how recursion works on numbers, I would start something
like this:

func 0 = ...
fun n = ...

This is similar to proving a recursion in discrete mathematics. In Haskell recursion is very
helpfull because unlike imperative programming languages Haskell you use recursion to declare
what a function is.


Recursion in haskell:
